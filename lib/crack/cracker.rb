require_relative '../encrypt/date_calculator'         # => true
require_relative '../encrypt/encryptor'               # => true
class Crack
  attr_reader :char_map ,:rotate, :encrypted_message  # => nil

  def initialize(encrypted_message = "vdfl7wf3rdblxk748wct77psrx8p728j")
    @encrypted_message = encrypted_message                                # => "vdfl7wf3rdblxk748wct77psrx8p728j", "vdfl7wf3rdblxk748wct77psrx8p728j", "vdfl7wf3rdblxk748wct77psrx8p728j", "vdfl7wf3rdblxk748wct77psrx8p728j"
    @char_map = Cipher.new.index                                          # => ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", " ", ".", ","], ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", " ", ".", ","], ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", " ", ".", ","], ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", " ", ".", ","]
    @rotate = Encrypt.new                                                 # => #<Encrypt:0x007fd32381f9e0 @key=#<KeyGenerator:0x007fd32381f990 @key="12345">, @offset=#<Offset:0x007fd32381f8f0 @date=14790208225>, @cipher=["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", " ", ".", ","]>, #<Encrypt:0x007fd323817f38 @key=#<KeyGenerator:0x007fd323817ee8 @key="12345">, @offset=#<Offset:0x007fd323817e70 @date=14790208225>, @cipher=["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", " ", ".", ","]>, #<Encrypt:0x007fd32297bb50 @key=#<KeyGenerator:0x007fd32297bb00 @key="12345">, @offset=#<Offset:0x007fd32297b9e8 @date=14790208225>, @cipher=["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", " ", ".", ","]>, #<Encrypt:0x007fd322970ef8 @key=#<KeyGenerator:0x007fd322970ea8 @key="12345">, @offset=#<Offset:0x007fd322970e30 @date=14790208225>, @cipher=["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", " ", ".", ","]>
  end                                                                     # => :initialize

  def index_encrypted_chars
    find_char_index_positions(last_four_chars_of_encrypted
  end                                                        # => :index_encrypted_chars

  def index_known_chars
    final_four_known = ["n", "d", ".", "."]  # => ["n", "d", ".", "."], ["n", "d", ".", "."], ["n", "d", ".", "."], ["n", "d", ".", "."], ["n", "d", ".", "."], ["n", "d", ".", "."], ["n", "d", ".", "."], ["n", "d", ".", "."], ["n", "d", ".", "."], ["n", "d", ".", "."], ["n", "d", ".", "."], ["n", "d", ".", "."], ["n", "d", ".", "."], ["n", "d", ".", "."], ["n", "d", ".", "."], ["n", "d", ".", "."], ["n", "d", ".", "."], ["n", "d", ".", "."], ["n", "d", ".", "."], ["n", "d", ".", "."], ["n", "d", ".", "."], ["n", "d", ".", "."], ["n", "d", ".", "."], ["n", "d", ".", "."], ["n", "d", ".", "."], ["n", "d", ".", "."], ["n", "d", ".", "."], ["n", "d", ".", "."], ["n", "d", ".", "."], ["n", "d", ".", "."], ["n", "d", ".", "."], ["n", "d", ".", "."], ["n", "d", ".", "."], ["n", "d", ".", "."]

    find_char_index_positions(final_four_known
  end                                            # => :index_known_chars

  def last_four_chars_of_encrypted
    encrypted_message[-4..-1].chars  # => ["7", "2", "8", "j"], ["7", "2", "8", "j"], ["7", "2", "8", "j"], ["7", "2", "8", "j"], ["7", "2", "8", "j"], ["7", "2", "8", "j"], ["7", "2", "8", "j"], ["7", "2", "8", "j"], ["7", "2", "8", "j"], ["7", "2", "8", "j"], ["7", "2", "8", "j"], ["7", "2", "8", "j"], ["7", "2", "8", "j"], ["7", "2", "8", "j"], ["7", "2", "8", "j"], ["7", "2", "8", "j"], ["7", "2", "8", "j"], ["7", "2", "8", "j"], ["7", "2", "8", "j"], ["7", "2", "8", "j"], ["7", "2", "8", "j"], ["7", "2", "8", "j"], ["7", "2", "8", "j"], ["7", "2", "8", "j"], ["7", "2", "8", "j"], ["7", "2", "8", "j"], ["7", "2", "8", "j"], ["7", "2", "8", "j"], ["7", "2", "8", "j"], ["7", "2", "8", "j"], ["7", "2", "8", "j"], ["7", "2", "8", "j"], ["7", "2", "8", "j"], ["7", "2", "8", "j"]
  end                                # => :last_four_chars_of_encrypted

  def find_char_index_positions(chars)
    chars.map do |c|                    # => ["n", "d", ".", "."], ["7", "2", "8", "j"], ["n", "d", ".", "."], ["7", "2", "8", "j"], ["n", "d", ".", "."], ["7", "2", "8", "j"], ["n", "d", ".", "."], ["7", "2", "8", "j"], ["n", "d", ".", "."], ["7", "2", "8", "j"], ["n", "d", ".", "."], ["7", "2", "8", "j"], ["n", "d", ".", "."], ["7", "2", "8", "j"], ["n", "d", ".", "."], ["7", "2", "8", "j"], ["n", "d", ".", "."], ["7", "2", "8", "j"], ["n", "d", ".", "."], ["7", "2", "8", "j"], ["n", "d", ".", "."], ["7", "2", "8", "j"], ["n", "d", ".", "."], ["7", "2", "8", "j"], ["n", "d", ".", "."], ["7", "2", "8", "j"], ["n", "d", ".", "."], ["7", "2", "8", "j"], ["n", "d", ".", "."], ["7", "2", "8", "j"], ["n", "d", ".", "."], ["7", "2", "8", "j"], ["n", "d", ".", "."], ["7", "2", "8", "j"], ["n", "d", ".", "."], ["7", "2", "8", "j"], ["n", "d", ".", "."], ["7", "2", "8", "j"], ["n", "d", ".", "."], ["7", "2", "8", "j"], ["n", "d", ".", "."], ["7", "2", "8", "j"], ["n", "d", ".", "."], ["7", "2", "8", "j"], ["n", "d", ".", "."], ["7", "2", "8", "j"], ["n", "d", ".", "."], ["7", "2", "8", "j"], ["n", "d", ".", "."], ["7", "2", "8", "j"], ["n", "d", ".", "."], ["7", "2", "8", "j"], ["n", "d", ".", "."], ["7", "2", "8", "j"], ["n", "d", ".", "."], ["7", "2", "8", "j"], ["n", "d", ".", "."], ["7", "2", "8", "j"], ["n", "d", ".", "."], ["7", "2", "8", "j"], ["n", "d", ".", "."], ["7", "2", "8", "j"], ["n", "d", ".", "."], ["7", "2", "8", "j"], ["n", "d", ".", "."], ["7", "2", "8", "j"], ["n", "d", ".", "."], ["7", "2", "8", "j"]
      char_map.find_index(c)            # => 13, 3, 37, 37, 33, 28, 34, 9, 13, 3, 37, 37, 33, 28, 34, 9, 13, 3, 37, 37, 33, 28, 34, 9, 13, 3, 37, 37, 33, 28, 34, 9, 13, 3, 37, 37, 33, 28, 34, 9, 13, 3, 37, 37, 33, 28, 34, 9, 13, 3, 37, 37, 33, 28, 34, 9, 13, 3, 37, 37, 33, 28, 34, 9, 13, 3, 37, 37, 33, 28, 34, 9, 13, 3, 37, 37, 33, 28, 34, 9, 13, 3, 37, 37, 33, 28, 34, 9, 13, 3, 37, 37, 33, 28, 34, 9, 13, 3, 37, 37, 33, 28, 34, 9, 13, 3, 37, 37, 33, 28, 34, 9, 13, 3, 37, 37, 33, 28, 34, 9, 13, 3, 37, 37, 33, 28, 34, 9, 13, 3, 37, 37, 33, 28, 34, 9, 13, 3, 37, 37, 33, 28, 34, 9, 13, 3, 37, 37, 33, 28, 34, 9, 13, 3, 37, 37, 33, 28, 34, 9, 13, 3, 37, 37, 33, 28, 34, 9, 13, 3, 37, 37, 33, 28, 34, 9, 13, 3, 37, 37, 33, 28, 34, 9, 13, 3, 37, 37, 33, 28, 34, 9, 13, 3, 37, 37, 33, 28, 34, 9, 13, 3, 37, 37, 33, 28, 34, 9, 13, 3, 37, 37, 33, 28, 34, 9, 13, 3, 37, 37, 33, 28, 34, 9, 13, 3, 37, 37, 33, 28, 34, 9, 13, 3, 37, 37, 33, 28, 34, 9, 13, 3, 37, 37, 33, 28, 34, 9, 13, 3, 37, 37, 33, 28, 34, 9, 13, 3, 37, 37, 33, 28, 34, 9, 13, 3, 37, 37, 33, 28, 34, 9
    end                                 # => [13, 3, 37, 37], [33, 28, 34, 9], [13, 3, 37, 37], [33, 28, 34, 9], [13, 3, 37, 37], [33, 28, 34, 9], [13, 3, 37, 37], [33, 28, 34, 9], [13, 3, 37, 37], [33, 28, 34, 9], [13, 3, 37, 37], [33, 28, 34, 9], [13, 3, 37, 37], [33, 28, 34, 9], [13, 3, 37, 37], [33, 28, 34, 9], [13, 3, 37, 37], [33, 28, 34, 9], [13, 3, 37, 37], [33, 28, 34, 9], [13, 3, 37, 37], [33, 28, 34, 9], [13, 3, 37, 37], [33, 28, 34, 9], [13, 3, 37, 37], [33, 28, 34, 9], [13, 3, 37, 37], [33, 28, 34, 9], [13, 3, 37, 37], [33, 28, 34, 9], [13, 3, 37, 37], [33, 28, 34, 9], [13, 3, 37, 37], [33, 28, 34, 9], [13, 3, 37, 37], [33, 28, 34, 9], [13, 3, 37, 37], [33, 28, 34, 9], [13, 3, 37, 37], [33, 28, 34, 9], [13, 3, 37, 37], [33, 28, 34, 9], [13, 3, 37, 37], [33, 28, 34, 9], [13, 3, 37, 37], [33, 28, 34, 9], [13, 3, 37, 37], [33, 28, 34, 9], [13, 3, 37, 37], [33, 28, 34, 9], [13, 3, 37, 37], [33, 28, 34, 9], [13, 3, 37, 37], [33, 28, 34, 9], [13, 3, 37, 37], [33, 28, 34, 9], [13, 3, 37, 37], [33, 28, 34, 9], [13, 3, 37, 37], [33, 28, 34, 9], [13, 3, 37, 37], [33, 28, 34, 9], [13, 3, 37, 37], [33, 28, 34, 9], [13, 3, 37, 37], [33, 28, 34, 9], [13, 3, 37, 37], [33, 28, 34, 9]
  end                                   # => :find_char_index_positions

  def crack_offsets
    offsets = index_known_chars.zip(index_encrypted_chars)  # => [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]]
    offsets.map do |offset|                                 # => [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]], [[13, 33], [3, 28], [37, 34], [37, 9]]
      offset.reduce(:-)                                     # => -20, -25, 3, 28, -20, -25, 3, 28, -20, -25, 3, 28, -20, -25, 3, 28, -20, -25, 3, 28, -20, -25, 3, 28, -20, -25, 3, 28, -20, -25, 3, 28, -20, -25, 3, 28, -20, -25, 3, 28, -20, -25, 3, 28, -20, -25, 3, 28, -20, -25, 3, 28, -20, -25, 3, 28, -20, -25, 3, 28, -20, -25, 3, 28, -20, -25, 3, 28, -20, -25, 3, 28, -20, -25, 3, 28, -20, -25, 3, 28, -20, -25, 3, 28, -20, -25, 3, 28, -20, -25, 3, 28, -20, -25, 3, 28, -20, -25, 3, 28, -20, -25, 3, 28, -20, -25, 3, 28, -20, -25, 3, 28, -20, -25, 3, 28, -20, -25, 3, 28, -20, -25, 3, 28, -20, -25, 3, 28, -20, -25, 3, 28
    end                                                     # => [-20, -25, 3, 28], [-20, -25, 3, 28], [-20, -25, 3, 28], [-20, -25, 3, 28], [-20, -25, 3, 28], [-20, -25, 3, 28], [-20, -25, 3, 28], [-20, -25, 3, 28], [-20, -25, 3, 28], [-20, -25, 3, 28], [-20, -25, 3, 28], [-20, -25, 3, 28], [-20, -25, 3, 28], [-20, -25, 3, 28], [-20, -25, 3, 28], [-20, -25, 3, 28], [-20, -25, 3, 28], [-20, -25, 3, 28], [-20, -25, 3, 28], [-20, -25, 3, 28], [-20, -25, 3, 28], [-20, -25, 3, 28], [-20, -25, 3, 28], [-20, -25, 3, 28], [-20, -25, 3, 28], [-20, -25, 3, 28], [-20, -25, 3, 28], [-20, -25, 3, 28], [-20, -25, 3, 28], [-20, -25, 3, 28], [-20, -25, 3, 28], [-20, -25, 3, 28], [-20, -25, 3, 28]
  end                                                       # => :crack_offsets

  def crack_it(encrypted_message)
    message = encrypted_message.downcase.chars                      # => ["v", "d", "f", "l", "7", "w", "f", "3", "r", "d", "b", "l", "x", "k", "7", "4", "8", "w", "c", "t", "7", "7", "p", "s", "r", "x", "8", "p", "7", "2", "8", "j"]
    message.map!.with_index do |string,index|                       # => #<Enumerator: ["v", "d", "f", "l", "7", "w", "f", "3", "r", "d", "b", "l", "x", "k", "7", "4", "8", "w", "c", "t", "7", "7", "p", "s", "r", "x", "8", "p", "7", "2", "8", "j"]:map!>
      if index % 4 == 0                                             # => true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false
        full_rotation = @char_map.index(string) + crack_offsets[0]  # => 1, 13, -3, 3, 14, 13, -3, 13
        string = @char_map.rotate(full_rotation)[0]                 # => "b", "n", " ", "d", "o", "n", " ", "n"
      elsif index % 4 == 1                                          # => true, false, false, true, false, false, true, false, false, true, false, false, true, false, false, true, false, false, true, false, false, true, false, false
        full_rotation = @char_map.index(string) + crack_offsets[1]  # => -22, -3, -22, -15, -3, 8, -2, 3
        string = @char_map.rotate(full_rotation)[0]                 # => "r", " ", "r", "y", " ", "i", ".", "d"
      elsif index % 4 == 2                                          # => true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false
        full_rotation = @char_map.index(string) + crack_offsets[2]  # => 8, 8, 4, 36, 5, 18, 37, 37
        string = @char_map.rotate(full_rotation)[0]                 # => "i", "i", "e", " ", "f", "s", ".", "."
      else
        full_rotation = @char_map.index(string) + crack_offsets[3]  # => 39, 57, 39, 58, 47, 46, 43, 37
        string = @char_map.rotate(full_rotation)[0]                 # => "a", "s", "a", "t", "i", "h", "e", "."
      end                                                           # => "b", "r", "i", "a", "n", " ", "i", "s", " ", "r", "e", "a", "d", "y", " ", "t", "o", " ", "f", "i", "n", "i", "s", "h", " ", ".", ".", "e", "n", "d", ".", "."
    end                                                             # => ["b", "r", "i", "a", "n", " ", "i", "s", " ", "r", "e", "a", "d", "y", " ", "t", "o", " ", "f", "i", "n", "i", "s", "h", " ", ".", ".", "e", "n", "d", ".", "."]
    message.join                                                    # => "brian is ready to finish ..end.."
  end                                                               # => :crack_it


end                                                               # => :crack_it
Crack.new.index_known_chars.zip(Crack.new.index_encrypted_chars)  # => [[13, 33], [3, 28], [37, 34], [37, 9]]
Crack.new.crack_offsets                                           # => [-20, -25, 3, 28]
Crack.new.crack_it("vdfl7wf3rdblxk748wct77psrx8p728j")            # => "brian is ready to finish ..end.."
